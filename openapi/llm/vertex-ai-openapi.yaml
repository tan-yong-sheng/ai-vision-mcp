openapi: 3.0.3
info:
  title: Vertex AI Gemini Vision API
  version: 1.0.0
  description: >
    API specification for interacting with Google's Vertex AI Gemini models for vision understanding
    including image and video analysis using Google Cloud Vertex AI.

servers:
  - url: https://aiplatform.googleapis.com/v1
    description: Vertex AI endpoint
    variables:
      endpoint:
        default: aiplatform.googleapis.com
        description: Vertex AI endpoint URL

tags:
  - name: Vertex AI Gemini
    description: Endpoints for Vertex AI Gemini multimodal content generation and analysis

security:
  - BearerAuth: []

paths:
  # --- Content Generation Endpoints ---

  /projects/{project}/locations/{location}/publishers/{publisher}/models/{modelId}:generateContent:
    post:
      tags:
        - Vertex AI Gemini
      summary: Generate content from images and videos with Vertex AI Gemini
      description: >
        Analyze images or videos using Vertex AI Gemini models.
        Supports both inline base64 data (for images) and Google Cloud Storage URIs (for images and videos).
        Use appropriate model: gemini-2.0-flash-lite for images, gemini-2.0-flash for videos.
      operationId: generateContent
      parameters:
        - in: path
          name: project
          schema:
            type: string
          required: true
          description: Google Cloud project ID
        - in: path
          name: location
          schema:
            type: string
            default: global
          required: true
          description: Vertex AI location/region
        - in: path
          name: publisher
          schema:
            type: string
            default: google
          required: true
          description: Model publisher
        - in: path
          name: modelId
          schema:
            type: string
            enum: [ gemini-2.5-pro, gemini-2.5-flash-lite, gemini-2.5-flash, gemini-2.0-flash]
            default: gemini-2.5-flash-lite
          required: true
          description: Gemini model to use for analysis
      requestBody:
        description: >
          Request body containing either image or video content to analyze.
          For images: use inline_data with base64 encoded image or file_data with GCS URI.
          For videos: use file_data with GCS URI (recommended for larger files).
        $ref: '#/components/requestBodies/GenerateContentBody'
      responses:
        '200':
          $ref: '#/components/responses/GenerateContentSuccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{project}/locations/{location}/publishers/{publisher}/models/{modelId}:streamGenerateContent:
    post:
      tags:
        - Vertex AI Gemini
      summary: Stream generate content from images and videos
      description: >
        Stream analysis of images or videos using Vertex AI Gemini models.
        Returns responses as they are generated for real-time feedback.
      operationId: streamGenerateContent
      parameters:
        - in: path
          name: project
          schema:
            type: string
          required: true
          description: Google Cloud project ID
        - in: path
          name: location
          schema:
            type: string
            default: us-central1
          required: true
          description: Vertex AI location/region
        - in: path
          name: publisher
          schema:
            type: string
            default: google
          required: true
          description: Model publisher
        - in: path
          name: modelId
          schema:
            type: string
            enum: [gemini-2.0-flash-lite, gemini-2.0-flash, gemini-1.5-pro, gemini-1.5-flash]
            default: gemini-2.0-flash-lite
          required: true
          description: Gemini model to use for analysis
      requestBody:
        $ref: '#/components/requestBodies/GenerateContentBody'
      responses:
        '200':
          description: Successful streaming response with generated content
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/StreamGenerateContentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: OAuth 2.0 token or service account key for authenticating with Vertex AI.

  requestBodies:
    GenerateContentBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateContentRequest'
          example:
            contents:
              - role: "user"
                parts:
                  - text: "Please analyze this image and describe what you see."
                  - inline_data:
                      mime_type: "image/jpeg"
                      data: "/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAABAAEDASIAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAv/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFQEBAQAAAAAAAAAAAAAAAAAAAAX/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwA/8A8A"
            generationConfig:
              temperature: 0.4
              maxOutputTokens: 1024
              candidateCount: 1

  responses:
    GenerateContentSuccess:
      description: Successful response with generated content.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateContentResponse'

    BadRequest:
      description: Invalid request payload or parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized due to missing or invalid authentication token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Access forbidden due to insufficient permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    TooManyRequests:
      description: Too many requests, rate limit exceeded.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    Part:
      type: object
      description: A part of a multi-part content message.
      oneOf:
        - properties:
            text:
              type: string
              description: Text content of the part.
          required: [text]
        - properties:
            inline_data:
              $ref: '#/components/schemas/InlineData'
          required: [inline_data]
        - properties:
            file_data:
              $ref: '#/components/schemas/FileData'
          required: [file_data]
      example:
        text: "Please analyze this image."

    InlineData:
      type: object
      description: Inline data for images, videos, or other media.
      properties:
        mime_type:
          type: string
          description: The IANA MIME type of the media (e.g., `image/jpeg`, `image/png`, `video/mp4`).
        data:
          type: string
          description: Base64-encoded media data.
      required:
        - mime_type
        - data

    FileData:
      type: object
      description: Data stored in Google Cloud Storage, referenced by URI.
      properties:
        file_uri:
          type: string
          description: The URI of the media file in Google Cloud Storage (e.g., `gs://bucket/file.mp4`).
        mime_type:
          type: string
          description: The IANA MIME type of the media (e.g., `image/jpeg`, `video/mp4`).
      required:
        - file_uri
        - mime_type

    Content:
      type: object
      description: Structured data type containing multi-part content.
      properties:
        role:
          type: string
          description: The identity of the entity that creates the message.
          enum: [user, model]
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
          minItems: 1
      required:
        - parts

    GenerationConfig:
      type: object
      description: Configuration for content generation.
      properties:
        candidateCount:
          type: integer
          minimum: 1
          maximum: 8
          default: 1
          description: Number of generated candidates to return.
        stopSequences:
          type: array
          items:
            type: string
          description: Sequences that stop generation when encountered.
        maxOutputTokens:
          type: integer
          minimum: 1
          maximum: 8192
          default: 1024
          description: Maximum number of tokens to generate in the response.
        temperature:
          type: number
          format: float
          minimum: 0.0
          maximum: 2.0
          default: 0.9
          description: Controls the degree of randomness in token selection.
        topP:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          default: 1.0
          description: The maximum cumulative probability of tokens to consider when sampling.
        topK:
          type: integer
          minimum: 1
          default: 32
          description: The maximum number of tokens to consider when sampling.

    GenerateContentRequest:
      type: object
      description: Request body for the generateContent endpoint.
      properties:
        contents:
          type: array
          items:
            $ref: '#/components/schemas/Content'
          minItems: 1
          description: The content to be analyzed.
        generationConfig:
          $ref: '#/components/schemas/GenerationConfig'
        safetySettings:
          type: array
          items:
            $ref: '#/components/schemas/SafetySetting'
          description: Safety settings for content generation.
      required:
        - contents
      example:
        # Image Analysis Example
        contents:
          - role: "user"
            parts:
              - text: "Please analyze this image and describe what you see."
              - inline_data:
                  mime_type: "image/jpeg"
                  data: "/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAABAAEDASIAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAv/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFQEBAQAAAAAAAAAAAAAAAAAAAAX/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwA/8A8A"
        generationConfig:
          temperature: 0.4
          maxOutputTokens: 1024
          candidateCount: 1

    SafetySetting:
      type: object
      description: Safety setting for content generation.
      properties:
        category:
          type: string
          description: The safety category.
          enum: [HARM_CATEGORY_HARASSMENT, HARM_CATEGORY_HATE_SPEECH, HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT]
        threshold:
          type: string
          description: The threshold for blocking content.
          enum: [HARM_BLOCK_THRESHOLD_UNSPECIFIED, BLOCK_LOW_AND_ABOVE, BLOCK_MEDIUM_AND_ABOVE, BLOCK_ONLY_HIGH, BLOCK_NONE]

    Candidate:
      type: object
      description: A generated response candidate.
      properties:
        content:
          $ref: '#/components/schemas/Content'
        finishReason:
          type: string
          description: The reason why generation stopped.
          enum: [FINISH_REASON_UNSPECIFIED, STOP, MAX_TOKENS, SAFETY, RECITATION, OTHER]
        index:
          type: integer
          description: The index of the candidate.
        safetyRatings:
          type: array
          items:
            $ref: '#/components/schemas/SafetyRating'

    SafetyRating:
      type: object
      description: Safety rating for content.
      properties:
        category:
          type: string
          description: The safety category.
        probability:
          type: string
          description: The probability of the content belonging to this category.
        blocked:
          type: boolean
          description: Whether the content was blocked.

    UsageMetadata:
      type: object
      description: Metadata about token usage.
      properties:
        promptTokenCount:
          type: integer
          description: Number of tokens in the prompt.
        candidatesTokenCount:
          type: integer
          description: Number of tokens in the generated response.
        totalTokenCount:
          type: integer
          description: Total number of tokens used.

    GenerateContentResponse:
      type: object
      description: Response body from the generateContent endpoint.
      properties:
        candidates:
          type: array
          items:
            $ref: '#/components/schemas/Candidate'
        usageMetadata:
          $ref: '#/components/schemas/UsageMetadata'
        modelVersion:
          type: string
          description: The model version used for generation.

    StreamGenerateContentResponse:
      type: object
      description: Response body from the streamGenerateContent endpoint.
      properties:
        candidates:
          type: array
          items:
            $ref: '#/components/schemas/Candidate'
        usageMetadata:
          $ref: '#/components/schemas/UsageMetadata'
        modelVersion:
          type: string
          description: The model version used for generation.

    ErrorResponse:
      type: object
      description: Error response from Vertex AI API.
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              description: HTTP status code.
            message:
              type: string
              description: Error message.
            status:
              type: string
              description: Error status.
            details:
              type: array
              items:
                type: object
              description: Additional error details.
      required:
        - error